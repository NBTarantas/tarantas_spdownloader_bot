
import re
import shutil
import subprocess
import pysofaconventions as sofa
import time
from functools import wraps

import requests
import yt_dlp

import numpy as np
import soundfile as sf
from scipy import signal
from scipy.signal import butter, lfilter
from pydub import AudioSegment


import telebot

from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging

from constants.allowed_users import ALLOWED_USERS
from constants.admin_users import ADMIN_USERS
from outh_data import YOUTUBE_API_KEY
from sp_tools.markup_creation import create_markup

from spotify.spotify_logik import get_tracks_from_playlist, download_and_send_track, bot, split_file, \
    download_track_for_zip, DownloadProgress, get_track, get_track_single, search_spotify_tracks
from url_checker.url_checker import is_spotify_playlist_url, is_spotify_track_url, is_yt_track_url, is_add_command, \
    is_deezer_playlist_url, is_deezer_track_url, is_video_link, is_inst_link
import os

from datetime import datetime
import sys

import deezer

from youtube.youtube_logik import download_youtube_track, download_youtube_track_for_zip

telebot.apihelper.TIMEOUT = 60

# –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è –ª–æ–≥—ñ–≤, —è–∫—â–æ —ó—ó –Ω–µ–º–∞—î
log_directory = "logs"
if not os.path.exists(log_directory):
    os.makedirs(log_directory)

# –°—Ç–≤–æ—Ä—é—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –ª–æ–≥—É –∑ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é
log_filename = os.path.join(log_directory, f"bot_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.log")

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—ñ–≤
log_format = logging.Formatter(
    '%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(funcName)s() - %(message)s'
)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ —Ñ–∞–π–ª–æ–≤–∏—Ö –ª–æ–≥—ñ–≤
file_handler = logging.FileHandler(log_filename, encoding='utf-8')
file_handler.setFormatter(log_format)
file_handler.setLevel(logging.DEBUG)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫–∞ –∫–æ–Ω—Å–æ–ª—å–Ω–∏—Ö –ª–æ–≥—ñ–≤
console_handler = logging.StreamHandler(sys.stdout)
console_handler.setFormatter(log_format)
console_handler.setLevel(logging.INFO)

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∫–æ—Ä–µ–Ω–µ–≤–æ–≥–æ –ª–æ–≥–µ—Ä–∞
logger = logging.getLogger()
logger.setLevel(logging.DEBUG)
logger.addHandler(file_handler)
logger.addHandler(console_handler)


# –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ—Ö–æ–ø–ª—é–≤–∞—á –Ω–µ–æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö –≤–∏–Ω—è—Ç–∫—ñ–≤
def handle_exception(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return

    logger.critical("–ù–µ–æ–±—Ä–æ–±–ª–µ–Ω–∞ –ø–æ–º–∏–ª–∫–∞:", exc_info=(exc_type, exc_value, exc_traceback))


sys.excepthook = handle_exception

# –°–ª–æ–≤–Ω–∏–∫–∏ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
search_sessions = {}
user_track_yt = {}
user_tracks = {}
user_v_or_a = {}
user_delivery_method = {}  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Å–ø–æ—Å–æ–±—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è
user_temp_folders = {}  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —à–ª—è—Ö—ñ–≤ –¥–æ —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö –ø–∞–ø–æ–∫
# –î–æ–¥–∞–º–æ —Å–ª–æ–≤–Ω–∏–∫ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –≤–∏–±—Ä–∞–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
user_audio_format = {}
# URL –¥–ª—è –ø–æ—à—É–∫—É –≤—ñ–¥–µ–æ
YOUTUBE_SEARCH_URL = "https://www.googleapis.com/youtube/v3/search"

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ñ–æ—Ä–º—É–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
def format_results(items):
    results = ""
    for item in items:
        title = item["snippet"]["title"]
        video_id = item["id"]["videoId"]
        results += f"[{title}](https://www.youtube.com/watch?v={video_id})\n"
    return results


def search_youtube(query, page_token=None):
    # –î–æ–¥–∞—î–º–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–ª—è –ø–æ—à—É–∫—É —Ç—ñ–ª—å–∫–∏ –º—É–∑–∏–∫–∏
    url = f"https://www.googleapis.com/youtube/v3/search?part=snippet&type=video&videoCategoryId=10&q={query}&key={YOUTUBE_API_KEY}&maxResults=5"
    if page_token:
        url += f"&pageToken={page_token}"
    response = requests.get(url)
    return response.json()


def create_search_results_keyboard(items):
    """–°—Ç–≤–æ—Ä—é—î —ñ–Ω–ª–∞–π–Ω –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ—à—É–∫—É"""
    markup = InlineKeyboardMarkup(row_width=1)

    for item in items:
        title = item["snippet"]["title"]
        video_id = item["id"]["videoId"]
        url = f"https://www.youtube.com/watch?v={video_id}"

        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç—Ä–µ–∫—É
        markup.add(InlineKeyboardButton(
            text=title,
            callback_data=f"youtube_url:{video_id}"
        ))

    return markup


@bot.message_handler(func=lambda message: message.text.lower().startswith("!—é—Ç—ñ "))
def handle_search(message):
    query = message.text[5:]  # –í–∏–¥–∞–ª—è—î–º–æ "–∑–Ω–∞–π—Ç–∏ " –∑ –ø–æ—á–∞—Ç–∫—É
    search_results = search_youtube(query)
    items = search_results.get("items", [])
    next_page_token = search_results.get("nextPageToken")
    prev_page_token = None

    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    markup = create_search_results_keyboard(items)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    navigation_row = []
    if prev_page_token:
        navigation_row.append(InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"search:{query}:{prev_page_token}"
        ))
    if next_page_token:
        navigation_row.append(InlineKeyboardButton(
            "‚û°Ô∏è –î–∞–ª—ñ",
            callback_data=f"search:{query}:{next_page_token}"
        ))
    if navigation_row:
        markup.row(*navigation_row)

    bot.send_message(
        message.chat.id,
        f"üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{query}':",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith("youtube_url:"))
def handle_youtube_url_selection(call):
    video_id = call.data.split(":")[1]
    url = f"https://www.youtube.com/watch?v={video_id}"
    user_id = call.from_user.id
    if user_id in ALLOWED_USERS: # –ù–∞–¥—Å–∏–ª–∞—î–º–æ URL —è–∫ –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        class MockMessage:
            def __init__(self, chat_id, from_user, text, message_id):
                self.chat = type('obj', (object,), {'id': chat_id})
                self.from_user = from_user
                self.text = text
                self.message_id = message_id

        # –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–∫—Ç–∏–≤–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ URL —Ç–∞ ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        mock_message = MockMessage(
            chat_id=call.message.chat.id,
            from_user=call.from_user,
            text=url,
            message_id=call.message.message_id
        )

        # –¢–µ–ø–µ—Ä –ø–µ—Ä–µ–¥–∞—î–º–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ handle_yt_track
        handle_yt_track(mock_message)
    else:
        bot.send_message(
            call.message.chat.id,
            url
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith("search:"))
def handle_pagination(call):
    _, query, page_token = call.data.split(":")
    search_results = search_youtube(query, page_token)
    items = search_results.get("items", [])
    next_page_token = search_results.get("nextPageToken")
    prev_page_token = search_results.get("prevPageToken")

    # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤—É –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    markup = create_search_results_keyboard(items)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤—ñ–≥–∞—Ü—ñ—ó
    navigation_row = []
    if prev_page_token:
        navigation_row.append(InlineKeyboardButton(
            "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"search:{query}:{prev_page_token}"
        ))
    if next_page_token:
        navigation_row.append(InlineKeyboardButton(
            "‚û°Ô∏è –î–∞–ª—ñ",
            callback_data=f"search:{query}:{next_page_token}"
        ))
    if navigation_row:
        markup.row(*navigation_row)

    bot.edit_message_text(
        f"üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{query}':",
        call.message.chat.id,
        call.message.message_id,
        reply_markup=markup
    )

def check_user_access(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        if not hasattr(message, 'from_user'):
            # –î–ª—è callback queries
            if hasattr(message, 'message'):
                user_id = message.from_user.id
            else:
                return
        else:
            user_id = message.from_user.id

        if user_id not in ALLOWED_USERS:
            bot.send_message(
                message.chat.id,
                f"Your ID: {user_id} \n–ù–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ '!—é—Ç—ñ \"–ù–∞–∑–≤–∞ —Ç—Ä–µ–∫—É\"' - –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞ YouTube \n'!—Å–ø–æ—Ç—ñ \"–ù–∞–∑–≤–∞ —Ç—Ä–µ–∫—É\"' - –¥–ª—è –ø–æ—à—É–∫—É –Ω–∞ Spotify \n –Ø –º–æ–∂—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ SPEEDUP —Ç–∞ Bass Boost. –¢–∞–∫–æ–∂ —è –º–æ–∂—É –Ω–∞–∫–ª–∞–¥–∞—Ç–∏ –µ—Ñ–µ–∫—Ç –ï–•–û —Ç–∞ 8D audio. \n –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–∞–π–ª —ñ —Å–ª—ñ–¥—É–π —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º –Ω–∞ –µ–∫—Ä–∞–Ω—ñ)",
                parse_mode="HTML"
            )
            #bot.send_message(message.chat.id, "–û–∫–µ–π... –°–µ–∫—É–Ω–¥–æ—á–∫—É, –¥–æ–¥–∞—é –≤–∞—Å –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤")
            #ALLOWED_USERS.append(int(user_id))
            #with open("constants/allowed_users.py", "w") as file:
                #file.write(f"ALLOWED_USERS = {ALLOWED_USERS}\n")
            #bot.send_message(message.chat.id, "–í—Å–µ! –í–∞—à —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –¥–æ–¥–∞–Ω–æ! –ë—É–¥—å –ª–∞—Å–∫–∞ –ø–æ—á–Ω—ñ—Ç—å —Ä–æ–∑–º–æ–≤—É —Å–ø–æ—á–∞—Ç–∫—É.")
            return
        return func(message, *args, **kwargs)

    return wrapper

def check_user_admin_access(func):
    @wraps(func)
    def wrapper(message, *args, **kwargs):
        if not hasattr(message, 'from_user'):
            # –î–ª—è callback queries
            if hasattr(message, 'message'):
                user_id = message.from_user.id
            else:
                return
        else:
            user_id = message.from_user.id

        if user_id not in ADMIN_USERS:
            bot.reply_to(message, f"||\n{user_id}\n|| is not in sudoers file", parse_mode="MarkdownV2")
            return
        return func(message, *args, **kwargs)

    return wrapper


@bot.message_handler(func=lambda message: is_add_command(message.text))
@check_user_access
@check_user_admin_access
def add_allowed_users(message):
    match = re.match(r"def add_new_user\[(\d+(?:, \d+)*)]", message.text)

    if match:
        # –û—Ç—Ä–∏–º—É—î–º–æ —á–∏—Å–ª–∞ –∑ —Ä—è–¥–∫–∞ —ñ –ø–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ —ó—Ö —É —Å–ø–∏—Å–æ–∫
        user_ids = match.group(1).split(", ")

        # –ü–µ—Ä–µ—Ç–≤–æ—Ä—é—î–º–æ –Ω–∞ —Å–ø–∏—Å–æ–∫ —Ü—ñ–ª–∏—Ö —á–∏—Å–µ–ª
        user_ids = [int(user_id) for user_id in user_ids]

        # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ ID –¥–æ —Å–ø–∏—Å–∫—É –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        ALLOWED_USERS.extend(user_ids)

        # –û–Ω–æ–≤–ª—é—î–º–æ Python —Ñ–∞–π–ª –∑—ñ —Å–ø–∏—Å–∫–æ–º –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        with open("constants/allowed_users.py", "w") as file:
            file.write(f"ALLOWED_USERS = {ALLOWED_USERS}\n")

        # –í–∏–≤–µ—Å—Ç–∏ –Ω–æ–≤–∏–π —Å–ø–∏—Å–æ–∫
        bot.reply_to(message, f"–ù–æ–≤—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –¥–æ–¥–∞–Ω—ñ: *{user_ids}*", parse_mode="MarkdownV2")
        bot.reply_to(message, f"–û–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–æ–∫ –¥–æ–∑–≤–æ–ª–µ–Ω–∏—Ö ID: ||{ALLOWED_USERS}||", parse_mode="MarkdownV2")
    else:
        bot.reply_to(message, "–§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: *def add_new_user\n[—á–∏—Å–ª–∞, —á–∏—Å–ª–∞, ...]\n*", parse_mode="MarkdownV2")


def get_deezer_track(track_url):
    """–û—Ç—Ä–∏–º—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ç—Ä–µ–∫ –∑ Deezer"""
    client = deezer.Client()
    track_id = re.search(r'track/(\d+)', track_url).group(1)
    track = client.get_track(track_id)

    return [{
        "name": track.title,
        "artist": track.artist.name
    }]


def get_deezer_tracks_from_playlist(playlist_url):
    """–û—Ç—Ä–∏–º—É—î —Ç—Ä–µ–∫–∏ –∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ Deezer"""
    client = deezer.Client()
    playlist_id = re.search(r'playlist/(\d+)', playlist_url).group(1)
    playlist = client.get_playlist(playlist_id)

    tracks = []
    for track in playlist.tracks:
        tracks.append({
            "name": track.title,
            "artist": track.artist.name
        })

    return tracks

@bot.message_handler(func=lambda message: is_deezer_track_url(message.text))
@check_user_access
def handle_deezer_track(message):
    try:
        track = get_deezer_track(message.text)
        user_tracks[message.from_user.id] = track

        # –°–ø–æ—á–∞—Ç–∫—É –ø–∏—Ç–∞—î–º–æ –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç
        markup = create_format_selection_keyboard(message)
        bot.reply_to(
            message,
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞—É–¥—ñ–æ:",
            reply_markup=markup
        )

    except Exception as e:
        logger.exception(f"Error handling Deezer track: {str(e)}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ —Ç—Ä–µ–∫—É Deezer: {str(e)}")

def download_video(url, chat_id, user_id):
    try:
        temp_folder = create_temp_folder(user_id)
        temp_path = f"{temp_folder}/track.mp4"

        progress = DownloadProgress(bot, chat_id, url)
        progress.send_initial_message()

        def ydl_progress_hook(d):
            if d['status'] == 'downloading':
                try:
                    downloaded = d.get('downloaded_bytes', 0)
                    total = d.get('total_bytes', 0) or d.get('total_bytes_estimate', 0)
                    if total:
                        p = int(20 + (downloaded / total * 40))
                        progress.update_progress(p)
                except:
                    pass

        ydl_opts = {
            "format": 'best',
            'ffmpeg_location': 'D:\\NBurc\\AI_App\\FFMpeg',
            "outtmpl": temp_path,
            "progress_hooks": [ydl_progress_hook],
            'verbose': True,
        }

        # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.download([url])
        progress.update_progress(100)
        progress.complete()

        bot.send_video(chat_id, open(temp_path, "rb"))
    except Exception as e:
        bot.send_message(chat_id, f"Ups! ERROR: {e}")


@bot.message_handler(func=lambda message: is_inst_link(message.text))
@check_user_access
def handle_video(message):
    user = message.from_user.id
    url = message.text
    chat_id = message.chat.id
    download_video(url, chat_id, user)

@bot.message_handler(func=lambda message: is_video_link(message.text))
@check_user_access
def handle_video(message):
    user = message.from_user.id
    url = message.text
    chat_id = message.chat.id
    download_video(url, chat_id, user)

@bot.message_handler(func=lambda message: is_deezer_playlist_url(message.text))
@check_user_access
def handle_deezer_playlist(message):
    try:
        tracks = get_deezer_tracks_from_playlist(message.text)
        user_tracks[message.from_user.id] = tracks

        # –°–ø–æ—á–∞—Ç–∫—É –ø–∏—Ç–∞—î–º–æ –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç
        markup = create_format_selection_keyboard(message)
        bot.reply_to(
            message,
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞—É–¥—ñ–æ:",
            reply_markup=markup
        )

    except Exception as e:
        logger.exception(f"Error handling Deezer playlist: {str(e)}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–µ–π–ª–∏—Å—Ç–∞ Deezer: {str(e)}")

def get_youtube_metadata(url):
    ydl_opts = {
        'quiet': True,
        'extract_flat': True,
        'skip_download': True,
        'no_warnings': True,
        'format': None  # –ù–µ –æ—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç–∏
    }

    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            ydl.cache.remove()  # –û—á–∏—â–∞—î–º–æ –∫–µ—à
            info = ydl.extract_info(url, download=False, process=False)  # process=False –¥–ª—è —à–≤–∏–¥—à–æ—ó —Ä–æ–±–æ—Ç–∏
            return {
                'title': info.get('title', 'Unknown Title'),
                'author': info.get('uploader', 'Unknown Artist'),
                'url': url
            }
    except Exception as e:
        logger.exception(f"Error getting YouTube metadata: {str(e)}")
        return {
            'title': 'Unknown Title',
            'author': 'Unknown Artist',
            'url': url
        }

def create_format_selection_keyboard(message):
    user_id = message.from_user.id
    if user_id in ADMIN_USERS:
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("MP3", callback_data="format_mp3"),
            InlineKeyboardButton("M4A", callback_data="format_m4a"),
            InlineKeyboardButton("WAV", callback_data="format_wav"),
            InlineKeyboardButton("FLAC", callback_data="format_flac")
        )
        return markup
    else:
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(
            InlineKeyboardButton("MP3", callback_data="format_mp3"),
            InlineKeyboardButton("M4A", callback_data="format_m4a"),
            InlineKeyboardButton("FLAC", callback_data="format_flac")
        )
        return markup

def create_delivery_method_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è"""
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("–ü–æ –æ–¥–Ω–æ–º—É", callback_data="delivery_single"),
        InlineKeyboardButton("–í ZIP –∞—Ä—Ö—ñ–≤—ñ", callback_data="delivery_zip")
    )
    return markup


def create_tracks_keyboard(tracks):
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ç—Ä–µ–∫–∞–º–∏"""
    markup = InlineKeyboardMarkup(row_width=1)

    for i, track in enumerate(tracks):
        if track.get('is_youtube'):
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –≤–∂–µ –æ—Ç—Ä–∏–º–∞–Ω—ñ –º–µ—Ç–∞–¥–∞–Ω—ñ
            track_name = f"{track['author']} - {track['title']}"
        else:
            # –û–±—Ä–æ–±–∫–∞ Spotify —Ç—Ä–µ–∫—ñ–≤ –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
            track_name = f"{track['artist']} - {track['name']}"

        markup.add(InlineKeyboardButton(
            text=track_name,
            callback_data=f"track_{i}"
        ))

    markup.add(InlineKeyboardButton("–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å–µ", callback_data="download_all"))
    return markup

@bot.message_handler(commands=['start'])
@check_user_access
def start_message(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start"""
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤—ñ—Ç! \n<b>–Ø –≤–º—ñ—é –∑–∞–≤–∞–Ω—Ç–∞–∂—É–≤–∞—Ç–∏ –º—É–∑–∏–∫—É –∑</b>: \n\nüî•–ø–ª–µ–π–ª–∏—Å—Ç—ñ–≤ Spotify —Ç–∞ \nüî•Deezer (—Ñ–æ—Ä–º–∞—Ç—É \"deezer.com/en/playlist...\" \nüî•–∑ –ø–æ—Å–∏–ª–∞–Ω—å –Ω–∞ —Ç—Ä–µ–∫ Spotify, \nüî•Youtube (YouTube Music) \n\n<b>–≤ —è–∫—ñ—Å–Ω–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:</b> \nüî•mp3, \nüî•m4a, \nüî•flac! \n\n–ê —Ç–∞–∫–æ–∂ —à—É–∫–∞—Ç–∏ –º—É–∑–∏–∫—É –∑–∞ —Ç—Ä–∏–≥–µ—Ä–æ–º \n<b>üî•\"!—é—Ç—ñ\"</b> - –Ω–∞ YouTube, \n<b>üî•\"!—Å–ø–æ—Ç—ñ\"</b> - –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ Spotify! \n\n\n<i>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –ø–æ—à—É–∫ –Ω–∞ Spotify, —è–∫—â–æ –º–∞—î—Ç–µ —Ç–æ—á–Ω—É –Ω–∞–∑–≤—É —Ç—Ä–µ–∫–∞ —è–∫–∏–π —à—É–∫–∞—î—Ç–µ! \n—ñ–Ω–∞–∫—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—à—É–∫—É –í–∞—Å –Ω–µ –∑–º–æ–∂–µ –∑–∞–¥–æ–≤–æ–ª—å–Ω–∏—Ç–∏</i>", parse_mode="HTML")
    bot.send_message(message.chat.id, "–ú–æ–∂—É –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–µ–≤–µ–ª–∏–∫–µ –≤—ñ–¥–µ–æ <b>(–¥–æ 50–º–±)</b> \n\n–Ø –ø—ñ–¥—Ç—Ä–∏–º—É—é —Ç–∞–∫—ñ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏: \n<b>üî•Instagram</b> \n<b>üî•TikTok</b> \n<b>üî•YouTube Shorts</b> \n<b>üî•Vimeo</b>", parse_mode="HTML")
    bot.send_message(message.chat.id, "\n –Ø –º–æ–∂—É —Å—Ç–≤–æ—Ä–∏—Ç–∏ <b>SPEEDUP</b> —Ç–∞ <b>Bass Boost</b>. –¢–∞–∫–æ–∂ —è –º–æ–∂—É –Ω–∞–∫–ª–∞–¥–∞—Ç–∏ –µ—Ñ–µ–∫—Ç <b>–ï–•–û</b> —Ç–∞ üî•<b>8D audio</b>. \n –ü—Ä–æ—Å—Ç–æ –Ω–∞–¥—ñ—à–ª–∏ –º–µ–Ω—ñ —Ñ–∞–π–ª —ñ —Å–ª—ñ–¥—É–π —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º –Ω–∞ –µ–∫—Ä–∞–Ω—ñ)", parse_mode="HTML")
@bot.message_handler(func=lambda message: message.text.lower().startswith("!—Å–ø–æ—Ç—ñ "))
def handle_search(message):
    query = message.text[7:]  # –í–∏–¥–∞–ª—è—î–º–æ "–∑–Ω–∞–π—Ç–∏ " –∑ –ø–æ—á–∞—Ç–∫—É
    search_results = search_spotify_tracks(query)

    if not search_results:
        bot.send_message(message.chat.id, f"–ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è '{query}' üò¢")
        return

    markup = InlineKeyboardMarkup(row_width=1)
    response_text = f"üéµ –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –¥–ª—è '{query}':\n"

    for track in search_results:
        response_text += f"[{track['artist']} - {track['name']}]({track['url']})\n"
        markup.add(InlineKeyboardButton(f"{track['artist']} - {track['name']}", url=track['url']))

    bot.send_message(message.chat.id, response_text, parse_mode="Markdown", reply_markup=markup)

@bot.message_handler(func=lambda message: is_spotify_track_url(message.text))
@check_user_access
def handle_spotify_track(message):
    try:
        track = get_track_single(message.text)

        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å–ø–∏—Å–æ–∫ —Ç—Ä–µ–∫—ñ–≤ (–Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –æ–¥–∏–Ω)
        user_tracks[message.from_user.id] = [{
            "name": track["name"],
            "artist": track["artist"],
            "album": track["album"],
            "url": track["url"],
            "is_youtube": False  # –î–æ–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–º–∏–ª–∫–∏
        }]

        bot.send_message(
            message.chat.id,
            f"üîç –ó–Ω–∞–π–¥–µ–Ω–æ: {track['artist']} - {track['name']}\nüéµ –ê–ª—å–±–æ–º: {track['album']}"
        )

        # –ü–æ—à—É–∫ –≤—ñ–¥–µ–æ –Ω–∞ YouTube
        yt_query = f"{track['artist']} - {track['name']}"
        search_results = search_youtube(yt_query)
        items = search_results.get("items", [])

        if items:
            video_url = f"https://www.youtube.com/watch?v={items[0]['id']['videoId']}"
            bot.send_message(message.chat.id, f"üé¨ –ù–∞–π–∫—Ä–∞—â–∏–π –∑–±—ñ–≥: [YouTube]({video_url})", parse_mode="Markdown")

        # –ó–∞–ø–∏—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
        markup = create_format_selection_keyboard(message)
        bot.send_message(
            message.chat.id,
            "–í–∏–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –∞—É–¥—ñ–æ:",
            reply_markup=markup
        )

    except Exception as e:
        bot.send_message(message.chat.id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")


@bot.message_handler(func=lambda message: is_yt_track_url(message.text))
@check_user_access
def handle_yt_track(message):
    """–û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞—É–¥—ñ–æ –∑ YouTube"""
    user_track_yt[message.from_user.id] = message.text

    # –®–≤–∏–¥–∫–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ—Ç–∞–¥–∞–Ω–∏—Ö
    metadata = get_youtube_metadata(message.text)

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ URL —Ç–∞ –º–µ—Ç–∞–¥–∞–Ω—ñ –≤ —Ç–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ
    user_tracks[message.from_user.id] = [{
        "url": message.text,
        "is_youtube": True,
        "title": metadata['title'],
        "author": metadata['author']
    }]

    # –ó–∞–ø–∏—Ç—É—î–º–æ —Ñ–æ—Ä–º–∞—Ç
    markup = create_format_selection_keyboard(message)
    bot.reply_to(
        message,
        f"–ó–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫: {metadata['author']} - {metadata['title']}\n–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞—É–¥—ñ–æ:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: is_spotify_playlist_url(message.text))
@check_user_access
def handle_playlist_url(message):
    """–û–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ URL –ø–ª–µ–π–ª–∏—Å—Ç–∞"""
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–µ–∫–∏
        tracks = get_tracks_from_playlist(message.text)
        user_tracks[message.from_user.id] = tracks

        # –°–ø–æ—á–∞—Ç–∫—É –ø–∏—Ç–∞—î–º–æ –ø—Ä–æ —Ñ–æ—Ä–º–∞—Ç
        markup = create_format_selection_keyboard(message)
        bot.reply_to(
            message,
            "–í–∏–±–µ—Ä—ñ—Ç—å —Ñ–æ—Ä–º–∞—Ç –∞—É–¥—ñ–æ:",
            reply_markup=markup
        )

    except Exception as e:
        logger.exception(f"Error handling playlist: {str(e)}")
        bot.reply_to(message, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–ª–µ–π–ª–∏—Å—Ç–∞: {str(e)}")

def create_temp_folder(user_id):
    """–°—Ç–≤–æ—Ä—é—î —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    folder_name = f"temp_{user_id}_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    path = f"temp/{folder_name}"
    os.makedirs(path, exist_ok=True)
    return path


def cleanup_temp_folder(folder_path):
    """–í–∏–¥–∞–ª—è—î —Ç–∏–º—á–∞—Å–æ–≤—É –ø–∞–ø–∫—É —Ç–∞ —ó—ó –≤–º—ñ—Å—Ç"""
    try:
        if os.path.exists(folder_path):
            for file in os.listdir(folder_path):
                os.remove(os.path.join(folder_path, file))
            os.rmdir(folder_path)
    except Exception as e:
        logger.exception(f"Error cleaning up temp folder: {str(e)}")
if not os.path.exists("downloads"):
    os.makedirs("downloads")

@bot.message_handler(content_types=['audio'])
def handle_audio(message):
    markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('BassBoost', 'SpeedUp', 'Reverb', '8d')
    msg = bot.reply_to(message, '–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:', reply_markup=markup)
    bot.register_next_step_handler(msg, process_option_step, message.audio.file_id)

def convert_to_wav(input_path, output_path):
    audio = AudioSegment.from_file(input_path)
    audio.export(output_path, format="wav")
def convert_to_m4a(input_path, output_path):
    audio = AudioSegment.from_file(input_path)
    audio.export(output_path, format="m4a")

def process_option_step(message, file_id):
    if message.text == 'BassBoost':
        bot.reply_to(message, '–ó–∞—á–µ–∫–∞–π—Ç–µ! –û–±—Ä–æ–±–∫–∞ —Ç—Ä–∏–≤–∞—î...')
        process_dance_eq_step(message, file_id)
    elif message.text == 'Reverb':
        bot.reply_to(message, '–ó–∞—á–µ–∫–∞–π—Ç–µ! –û–±—Ä–æ–±–∫–∞ —Ç—Ä–∏–≤–∞—î...')
        process_reverb_step(message, file_id)
    elif message.text == '8d':
        markup = telebot.types.ReplyKeyboardMarkup(one_time_keyboard=True)
        markup.add('Kemar', 'SAMREC-2500R', 'D1')
        msg = bot.reply_to(message, '–û–±–µ—Ä—ñ—Ç—å –∑–∞ —è–∫–∏–º —Å–µ—Ç–æ–º —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –µ—Ñ–µ–∫—Ç. \n<i>(–ï–∫—Å–ø–µ—Ä–µ–º–µ–Ω—Ç—É–π—Ç–µ, –æ–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω, –∞ –ø–æ—Ç—ñ–º —Å–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à–∏–π)</i> \n<b>–ü–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤—Ä–∞–∂–µ–Ω–Ω—è–º –Ω–∞–ø–∏—Å–∞–≤—à–∏ –≤—ñ–¥–≥—É–∫ —Å—é–¥–∏ <a href="https://t.me/spdownloader">Channel</a></b>', parse_mode="HTML", reply_markup=markup)
        bot.register_next_step_handler(msg, process_8d_step_1, file_id)
    elif message.text == 'SpeedUp':
        msg = bot.reply_to(message, '–í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 2:')
        bot.register_next_step_handler(msg, process_speed_up_step, file_id)
    else:
        bot.reply_to(message, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.')

def process_8d_step_1(message, file_id):
    if message.text == "Kemar":
        bot.reply_to(message, '–ó–∞—á–µ–∫–∞–π—Ç–µ! –û–±—Ä–æ–±–∫–∞ —Ç—Ä–∏–≤–∞—î... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.')
        process_8d_step_kemar(message, file_id)
    elif message.text == "D1":
        bot.reply_to(message, '–ó–∞—á–µ–∫–∞–π—Ç–µ! –û–±—Ä–æ–±–∫–∞ —Ç—Ä–∏–≤–∞—î... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.')
        process_8d_step_D1(message, file_id)
    elif message.text == "SAMREC-2500R":
        bot.reply_to(message, '–ó–∞—á–µ–∫–∞–π—Ç–µ! –û–±—Ä–æ–±–∫–∞ —Ç—Ä–∏–≤–∞—î... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–µ—è–∫–∏–π —á–∞—Å.')
        process_8d_step_SAMREC(message, file_id)

def process_8d_step_SAMREC(message, file_id):
    global input_file, output_file2, output_file
    try:
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        original_filename = file_path.split("/")[-1]
        extension = original_filename.split(".")[-1]

        input_file = f"downloads/{file_id}.{extension}"
        output_file = f"downloads/{file_id}_processed.wav"
        output_file2 = f"downloads/{file_id}-processed.{extension}"

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_path)
        with open(input_file, "wb") as f:
            f.write(downloaded_file)

        convert_to_wav(input_file, output_file)

        apply_8d_effect_base(output_file, output_file2)

        # üî• –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ FFmpeg —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–∏–≤ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
        if not os.path.exists(output_file2):
            bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞: –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
            return

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª
        with open(output_file2, "rb") as f:
            bot.send_audio(message.chat.id, f, reply_to_message_id=message.message_id)

        os.remove(input_file)
        os.remove(output_file)
        os.remove(output_file2)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

        os.remove(input_file)
        os.remove(output_file)
        os.remove(output_file2)
        if os.path.exists('downloads/track.wav'):
            os.remove(input_file)
        if os.path.exists('downloads/temp.wav'):
            os.remove(input_file)

def process_8d_step_D1(message, file_id):
    try:
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        original_filename = file_path.split("/")[-1]
        extension = original_filename.split(".")[-1]

        input_file = f"downloads/{file_id}.{extension}"
        output_file = f"downloads/{file_id}_processed.wav"
        output_file2 = f"downloads/{file_id}-processed1.wav"
        output_file3 = f"downloads/{file_id}-processed.m4a"

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_path)
        with open(input_file, "wb") as f:
            f.write(downloaded_file)

        convert_to_wav(input_file, output_file)

        apply_8d_effect_D1(output_file, output_file2)

        convert_to_m4a(output_file2, output_file3)

        # üî• –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ FFmpeg —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–∏–≤ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
        if not os.path.exists(output_file3):
            bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞: –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
            return

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª
        with open(output_file3, "rb") as f:
            bot.send_audio(message.chat.id, f, reply_to_message_id=message.message_id)

        os.remove(input_file)
        os.remove(output_file)
        os.remove(output_file2)
        os.remove(output_file3)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

        os.remove(input_file)
        os.remove(output_file)
        os.remove(output_file2)
        if os.path.exists('downloads/track.wav'):
            os.remove(input_file)
        if os.path.exists('downloads/temp.wav'):
            os.remove(input_file)

def process_8d_step_kemar(message, file_id):
    try:
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        original_filename = file_path.split("/")[-1]
        extension = original_filename.split(".")[-1]

        input_file = f"downloads/{file_id}.{extension}"
        output_file = f"downloads/{file_id}_processed.wav"
        output_file2 = f"downloads/{file_id}-processed.{extension}"

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_path)
        with open(input_file, "wb") as f:
            f.write(downloaded_file)

        convert_to_wav(input_file, output_file)

        apply_8d_effect_SOFA(output_file, output_file2)

        # üî• –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ FFmpeg —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–∏–≤ –≤–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª
        if not os.path.exists(output_file2):
            bot.reply_to(message, "‚ùå –ü–æ–º–∏–ª–∫–∞: –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ!")
            return

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª
        with open(output_file2, "rb") as f:
            bot.send_audio(message.chat.id, f, reply_to_message_id=message.message_id)

        os.remove(input_file)
        os.remove(output_file)
        os.remove(output_file2)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

        os.remove(input_file)
        os.remove(output_file)
        os.remove(output_file2)
        if os.path.exists('downloads/track.wav'):
            os.remove(input_file)
        if os.path.exists('downloads/temp.wav'):
            os.remove(input_file)


def process_reverb_step(message, file_id):
    global input_file, output_file2, output_file
    try:
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        original_filename = file_path.split("/")[-1]
        extension = original_filename.split(".")[-1]

        input_file = f"downloads/{file_id}.{extension}"
        output_file = f"downloads/{file_id}_processed.wav"
        output_file2 = f"downloads/{file_id}-processed.{extension}"

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_path)
        with open(input_file, "wb") as f:
            f.write(downloaded_file)

        convert_to_wav(input_file, output_file)

        apply_reverb(output_file, output_file2)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª
        with open(output_file2, "rb") as f:
            bot.send_audio(message.chat.id, f, reply_to_message_id=message.message_id)

        os.remove(input_file)
        os.remove(output_file)
        os.remove(output_file2)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

        os.remove(input_file)
        os.remove(output_file)
        os.remove(output_file2)
        if os.path.exists('downloads/track.wav'):
            os.remove(input_file)
        if os.path.exists('downloads/temp.wav'):
            os.remove(input_file)

def process_dance_eq_step(message, file_id):
    global input_file, output_file, output_file2
    try:
        file_info = bot.get_file(file_id)
        file_path = file_info.file_path

        # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
        original_filename = file_path.split("/")[-1]
        extension = original_filename.split(".")[-1]

        input_file = f"downloads/{file_id}.{extension}"
        output_file = f"downloads/{file_id}_processed.wav"
        output_file2 = f"downloads/track.wav"

        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
        downloaded_file = bot.download_file(file_path)
        with open(input_file, "wb") as f:
            f.write(downloaded_file)

        convert_to_wav(input_file, output_file)

        dance_eq(output_file, output_file2)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª
        with open(output_file2, "rb") as f:
            bot.send_audio(message.chat.id, f, reply_to_message_id=message.message_id)

        os.remove(input_file)
        os.remove(output_file)
        os.remove(output_file2)
    except Exception as e:
        bot.reply_to(message, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {str(e)}")

        os.remove(input_file)
        os.remove(output_file)
        os.remove(output_file2)
        if os.path.exists('downloads/track.wav'):
            os.remove(input_file)
        if os.path.exists('downloads/temp.wav'):
            os.remove(input_file)

def process_speed_up_step(message, file_id):
    bot.reply_to(message, '–ó–∞—á–µ–∫–∞–π—Ç–µ! –û–±—Ä–æ–±–∫–∞ —Ç—Ä–∏–≤–∞—î...')
    try:
        speed = float(message.text)
        if 1 <= speed <= 2:
            file_info = bot.get_file(file_id)
            file_path = file_info.file_path

            # –û—Ç—Ä–∏–º—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ —ñ–º'—è —Ñ–∞–π–ª—É —Ç–∞ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è
            original_filename = file_path.split("/")[-1]
            extension = original_filename.split(".")[-1]

            input_file = f"downloads/{file_id}.{extension}"
            output_file = f"downloads/{file_id}_processed.{extension}"

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–∞–π–ª
            downloaded_file = bot.download_file(file_path)
            with open(input_file, "wb") as f:
                f.write(downloaded_file)

            speed_up_audio(input_file, output_file, speed)

            bot.reply_to(message, f'–®–≤–∏–¥–∫—ñ—Å—Ç—å –∑–±—ñ–ª—å—à–µ–Ω–æ –Ω–∞ {speed} —Ä–∞–∑–∏.')

            # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–±—Ä–æ–±–ª–µ–Ω–∏–π —Ñ–∞–π–ª
            with open(output_file, "rb") as f:
                bot.send_audio(message.chat.id, f, reply_to_message_id=message.message_id)

            os.remove(input_file)
            os.remove(output_file)
        else:
            bot.reply_to(message, '–ß–∏—Å–ª–æ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –º—ñ–∂ 1 —ñ 2. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.')
    except ValueError:
        bot.reply_to(message, '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ —á–∏—Å–ª–æ. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É.')


# --- –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –û–ë–†–û–ë–ö–ò ---

import os
import soundfile as sf


def load_hrir_set(directory):
    """
    –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î HRIR –¥–∞–Ω—ñ –∑ –ø–∞–ø–∫–∏.
    –û—á—ñ–∫—É—î—Ç—å—Å—è, —â–æ —Ñ–∞–π–ª–∏ –º–∞—é—Ç—å –Ω–∞–∑–≤–∏ —Ç–∏–ø—É:
      L-000.wav, L-005.wav, ..., L-355.wav –¥–ª—è –ª—ñ–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É,
      R-000.wav, R-005.wav, ..., R-355.wav –¥–ª—è –ø—Ä–∞–≤–æ–≥–æ –∫–∞–Ω–∞–ª—É.
    """
    hrir_database = {}

    # –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ —Ñ–∞–π–ª–∞—Ö —É –ø–∞–ø—Ü—ñ
    for filename in os.listdir(directory):
        if filename.endswith(".wav") and filename.startswith("L-"):
            # –í–∏—Ç—è–≥—É—î–º–æ –∫—É—Ç –∑ –Ω–∞–∑–≤–∏ —Ñ–∞–π–ª—É, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "L-010.wav" -> "010"
            angle_str = filename.split('-')[1].split('.')[0]
            angle = int(angle_str)

            left_filepath = os.path.join(directory, filename)
            right_filename = f"R-{angle_str}.wav"
            right_filepath = os.path.join(directory, right_filename)

            if os.path.exists(right_filepath):
                hrir_left, sr_left = sf.read(left_filepath)
                hrir_right, sr_right = sf.read(right_filepath)

                if sr_left != sr_right:
                    print(f"Sample rates –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å –¥–ª—è –∫—É—Ç–∞ {angle}.")

                hrir_database[angle] = (hrir_left, hrir_right)
            else:
                print(f"–ü—Ä–∞–≤–∏–π —Ñ–∞–π–ª {right_filename} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –∫—É—Ç–∞ {angle}.")

    return hrir_database

directory = "D:\SAMREC-2500R-HRIR-Dataset"
hrir_database = load_hrir_set(directory)
print("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ HRIR –¥–ª—è –∫—É—Ç—ñ–≤:", sorted(hrir_database.keys()))


def get_hrir(angle, hrir_database):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–∞—Ä—É HRIR –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –∫—É—Ç–∞.
    –Ø–∫—â–æ —Ç–æ—á–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, –≤–∏–±–∏—Ä–∞—î –Ω–∞–π–±–ª–∏–∂—á–∏–π –∫—É—Ç.
    """
    available_angles = sorted(hrir_database.keys())
    closest_angle = min(available_angles, key=lambda a: abs(a - angle))
    return hrir_database[closest_angle]

def apply_8d_effect_base(input_file, output_file):
    """
    –°—Ç–≤–æ—Ä—é—î 8D –µ—Ñ–µ–∫—Ç –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é HRIR-–¥–∞—Ç–∞—Å–µ—Ç—É.
    –ê—É–¥—ñ–æ —Ä–æ–∑–±–∏–≤–∞—î—Ç—å—Å—è –Ω–∞ –±–ª–æ–∫–∏, –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –±–ª–æ–∫—É –≤–∏–∑–Ω–∞—á–∞—î—Ç—å—Å—è –∫—É—Ç –æ–±–µ—Ä—Ç–∞–Ω–Ω—è,
    –ø—ñ—Å–ª—è —á–æ–≥–æ –±–ª–æ–∫ –∑–≥–æ—Ä—Ç–∞—Ç–∏–º–µ—Ç—å—Å—è –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º–∏ —ñ–º–ø—É–ª—å—Å–Ω–∏–º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—è–º–∏ –¥–ª—è –ª—ñ–≤–æ–≥–æ —ñ –ø—Ä–∞–≤–æ–≥–æ –≤—É—Ö.
    –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–±–∏—Ä–∞—î—Ç—å—Å—è –º–µ—Ç–æ–¥–æ–º overlap-add —ñ –∑–±–µ—Ä—ñ–≥–∞—î—Ç—å—Å—è —è–∫ —Å—Ç–µ—Ä–µ–æ —Ñ–∞–π–ª.
    """
    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Ö—ñ–¥–Ω–æ–≥–æ –∞—É–¥—ñ–æ
    audio, sr = sf.read(input_file)
    # –Ø–∫—â–æ –∞—É–¥—ñ–æ –º–∞—î –±—ñ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É, –ø–µ—Ä–µ—Ç–≤–æ—Ä–∏–º–æ –≤ –º–æ–Ω–æ (—Å–µ—Ä–µ–¥–Ω—î –∑–Ω–∞—á–µ–Ω–Ω—è)
    if audio.ndim > 1:
        audio = audio.mean(axis=1)

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –±–ª–æ–∫—É–≤–∞–Ω–Ω—è: 0.1 —Å–µ–∫ –Ω–∞ –±–ª–æ–∫
    block_duration = 0.1  # —Å–µ–∫
    block_size = int(sr * block_duration)
    num_blocks = int(np.ceil(len(audio) / block_size))

    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –¥–æ–≤–∂–∏–Ω—É HRIR (–ø—Ä–∏–ø—É—Å–∫–∞—î–º–æ, —â–æ –¥–ª—è –≤—Å—ñ—Ö –∫—É—Ç—ñ–≤ –≤–æ–Ω–∞ –æ–¥–Ω–∞–∫–æ–≤–∞)
    sample_angle = next(iter(hrir_database))
    hrir_length = len(hrir_database[sample_angle][0])

    # –û–±—á–∏—Å–ª—é—î–º–æ —Ä–æ–∑–º—ñ—Ä –≤–∏—Ö—ñ–¥–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É (overlap-add: –∫–æ–∂–µ–Ω –±–ª–æ–∫ –¥–æ–¥–∞—î—Ç—å—Å—è –∑ –∑–º—ñ—â–µ–Ω–Ω—è–º block_size)
    output_length = num_blocks * block_size + hrir_length - 1
    output = np.zeros((output_length, 2))  # 2 –∫–∞–Ω–∞–ª–∏: –ª—ñ–≤–∏–π —Ç–∞ –ø—Ä–∞–≤–∏–π

    # –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ–≥–æ –æ–±–µ—Ä—Ç–∞–Ω–Ω—è: –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –æ–¥–∏–Ω –ø–æ–≤–Ω–∏–π –æ–±–µ—Ä—Ç (360¬∞) –∑–∞ 10 —Å–µ–∫—É–Ω–¥
    rotation_period = 10.0  # —Å–µ–∫—É–Ω–¥

    # –û–±—Ä–æ–±–∫–∞ –∫–æ–∂–Ω–æ–≥–æ –±–ª–æ–∫—É
    for i in range(num_blocks):
        start_idx = i * block_size
        block = audio[start_idx: start_idx + block_size]
        # –í–∏–∑–Ω–∞—á–∞—î–º–æ —á–∞—Å —Ü–µ–Ω—Ç—Ä—É –±–ª–æ–∫—É (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        block_time = (start_idx + len(block) / 2) / sr
        # –û–±—á–∏—Å–ª—é—î–º–æ –∫—É—Ç: —Ä–æ–±–∏–º–æ —Ü–∏–∫–ª—ñ—á–Ω–∏–π –æ–±–µ—Ä—Ç –≤—ñ–¥ 0 –¥–æ 360 –≥—Ä–∞–¥—É—Å—ñ–≤
        angle = (360 * (block_time / rotation_period)) % 360

        # –û—Ç—Ä–∏–º—É—î–º–æ –ø–∞—Ä—É HRIR –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ (–∞–±–æ –Ω–∞–π–±–ª–∏–∂—á–æ–≥–æ) –∫—É—Ç–∞
        hrir_left, hrir_right = get_hrir(angle, hrir_database)

        # –ó–≥–æ—Ä—Ç–∫–∞ –±–ª–æ–∫—É –∑ HRIR –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª—É
        conv_left = signal.convolve(block, hrir_left, mode='full')
        conv_right = signal.convolve(block, hrir_right, mode='full')
        conv_length = len(conv_left)  # –º–∞—î –¥–æ—Ä—ñ–≤–Ω—é–≤–∞—Ç–∏ len(block) + hrir_length - 1

        # Overlap-add: –¥–æ–¥–∞—î–º–æ –∑–≥–æ—Ä–Ω—É—Ç–∏–π –±–ª–æ–∫ —É –≤–∏—Ö—ñ–¥–Ω–∏–π —Å–∏–≥–Ω–∞–ª –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–º –∑–º—ñ—â–µ–Ω–Ω—è–º
        output[start_idx:start_idx + conv_length, 0] += conv_left
        output[start_idx:start_idx + conv_length, 1] += conv_right

    # –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è —Ñ—ñ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª—É –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –æ–±—Ä—ñ–∑–∞–Ω–Ω—è (clipping)
    max_val = np.max(np.abs(output))
    if max_val > 0:
        output = output / max_val

    # –ó–∞–ø–∏—Å—É—î–º–æ –≤–∏—Ö—ñ–¥–Ω–∏–π –∞—É–¥—ñ–æ —Ñ–∞–π–ª
    sf.write(output_file, output, sr)

def speed_up_audio(input_path, output_path, speed=1.5):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–º—ñ–Ω–∏ —à–≤–∏–¥–∫–æ—Å—Ç—ñ —Ç–∞ –ø—ñ—Ç—á—É –∞—É–¥—ñ–æ –∑ –ø—ñ–¥—Å–∏–ª–µ–Ω–Ω—è–º –Ω–∏–∑—å–∫–∏—Ö —á–∞—Å—Ç–æ—Ç"""
    command = f'ffmpeg -i "{input_path}" -filter:a "asetrate=44100*{speed},aresample=44100,bass=g=5" -vn "{output_path}"'
    subprocess.run(command, shell=True)

def dance_eq(input_path, output_path):
    """–ó–∞—Å—Ç–æ—Å–æ–≤—É—î Dance EQ —á–µ—Ä–µ–∑ FFmpeg"""
    command = f'ffmpeg -i "{input_path}" -filter:a "bass=g=12" -vn "{output_path}"'
    subprocess.run(command, shell=True)

def get_hrir_sofa(azimuth, elevation, sofa_file, hrir_data):
    """–û—Ç—Ä–∏–º–∞–Ω–Ω—è HRIR –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ –∞–∑–∏–º—É—Ç—É —Ç–∞ –µ–ª–µ–≤–∞—Ü—ñ—ó."""
    # –ü–æ—à—É–∫ –Ω–∞–π–±–ª–∏–∂—á–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç—ñ –ø–æ –∫—É—Ç–∞—Ö
    pos = sofa_file.getVariableValue('SourcePosition')
    distances = np.sqrt((pos[:, 0] - azimuth)**2 + (pos[:, 1] - elevation)**2)
    idx = np.argmin(distances)
    hrir_left = hrir_data[idx, 0, :]
    hrir_right = hrir_data[idx, 1, :]
    return hrir_left, hrir_right

def apply_8d_effect_SOFA(input_file, output_file):
    # –í–∫–∞–∂—ñ—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ SOFA —Ñ–∞–π–ª—É
    file_path = 'D:/NBurc/Python/tarantas_spdownloader_bot/mit_kemar_large_pinna.sofa'
    sofa_file = sofa.SOFAFile(file_path, 'r')
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö HRIR —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    hrir_data = sofa_file.getDataIR()
    hrir_sampling_rate = sofa_file.getSamplingRate()
    audio, sr = sf.read(input_file)
    if audio.ndim > 1:
        audio = audio.mean(axis=1)

    block_duration = 0.1
    block_size = int(sr * block_duration)
    num_blocks = int(np.ceil(len(audio) / block_size))

    output_length = num_blocks * block_size + hrir_data.shape[2] - 1
    output = np.zeros((output_length, 2))

    rotation_period = 10.0

    for i in range(num_blocks):
        start_idx = i * block_size
        block = audio[start_idx: start_idx + block_size]
        block_time = (start_idx + len(block) / 2) / sr
        angle = (360 * (block_time / rotation_period)) % 360
        hrir_left, hrir_right = get_hrir_sofa(angle, 0, sofa_file, hrir_data)

        conv_left = signal.convolve(block, hrir_left, mode='full')
        conv_right = signal.convolve(block, hrir_right, mode='full')
        conv_length = len(conv_left)

        output[start_idx:start_idx + conv_length, 0] += conv_left
        output[start_idx:start_idx + conv_length, 1] += conv_right

    max_val = np.max(np.abs(output))
    if max_val > 0:
        output = output / max_val

    sf.write(output_file, output, sr)

def apply_8d_effect_D1(input_file, output_file):
    # –í–∫–∞–∂—ñ—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω–∏–π —à–ª—è—Ö –¥–æ SOFA —Ñ–∞–π–ª—É
    file_path = r'D:\NBurc\Python\tarantas_spdownloader_bot\D1_96K_24bit_512tap_FIR_SOFA.sofa'
    sofa_file = sofa.SOFAFile(file_path, 'r')
    # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö HRIR —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    hrir_data = sofa_file.getDataIR()
    hrir_sampling_rate = sofa_file.getSamplingRate()
    audio, sr = sf.read(input_file)
    if audio.ndim > 1:
        audio = audio.mean(axis=1)

    block_duration = 0.1
    block_size = int(sr * block_duration)
    num_blocks = int(np.ceil(len(audio) / block_size))

    output_length = num_blocks * block_size + hrir_data.shape[2] - 1
    output = np.zeros((output_length, 2))

    rotation_period = 10.0

    for i in range(num_blocks):
        start_idx = i * block_size
        block = audio[start_idx: start_idx + block_size]
        block_time = (start_idx + len(block) / 2) / sr
        angle = (360 * (block_time / rotation_period)) % 360
        hrir_left, hrir_right = get_hrir_sofa(angle, 0, sofa_file, hrir_data)

        conv_left = signal.convolve(block, hrir_left, mode='full')
        conv_right = signal.convolve(block, hrir_right, mode='full')
        conv_length = len(conv_left)

        output[start_idx:start_idx + conv_length, 0] += conv_left
        output[start_idx:start_idx + conv_length, 1] += conv_right

    max_val = np.max(np.abs(output))
    if max_val > 0:
        output = output / max_val


    sf.write(output_file, output, sr)



def apply_reverb(input_file, output_file):
    """–î–æ–¥–∞—î —Ä–µ–≤–µ—Ä–±–µ—Ä–∞—Ü—ñ—é (–ª—É–Ω–∞, –æ–±'—î–º–Ω–∏–π –µ—Ñ–µ–∫—Ç)"""
    subprocess.run([
        'ffmpeg', '-i',
        input_file,
        '-af', 'aecho=0.8:0.88:60:0.4, stereotools=mlev=1', output_file, '-y'
    ], check=True)

@bot.callback_query_handler(func=lambda call: True)
@check_user_access
def handle_callback(call):
    """–û–Ω–æ–≤–ª–µ–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ callback-–∑–∞–ø–∏—Ç—ñ–≤ –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é YouTube"""
    try:
        user_id = call.from_user.id

        # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Ñ–æ—Ä–º–∞—Ç—É
        if call.data.startswith("format_"):
            audio_format = call.data.split("_")[1]
            user_audio_format[user_id] = audio_format

            # –ü–æ–∫–∞–∑—É—î–º–æ –º–µ–Ω—é –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –¥–æ—Å—Ç–∞–≤–∫–∏
            markup = create_delivery_method_keyboard()
            bot.edit_message_text(
                f"–§–æ—Ä–º–∞—Ç {audio_format.upper()} –≤–∏–±—Ä–∞–Ω–æ. –Ø–∫ –≤–∏ —Ö–æ—á–µ—Ç–µ –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ñ–∞–π–ª–∏?",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            return
        if call.data == "speedup":
            bot.send_message(call.message.chat.id, "–ù–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª —Ç–∞ –æ–±–µ—Ä–∏ –æ–ø—Ü—ñ—é.")
        if call.data == "bassboost":
            bot.send_message(call.message.chat.id, "–ù–∞–¥—ñ—à–ª–∏ —Ñ–∞–π–ª —Ç–∞ –æ–±–µ—Ä–∏ –æ–ø—Ü—ñ—é.")
        # –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –¥–æ—Å—Ç–∞–≤–∫–∏
        if call.data.startswith("delivery_"):
            handle_delivery_method(call)
            return

        # –û—Ç—Ä–∏–º—É—î–º–æ —Ç—Ä–µ–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        tracks = user_tracks.get(user_id)
        if not tracks:
            bot.answer_callback_query(call.id, "–ü–æ–º–∏–ª–∫–∞: —Ç—Ä–µ–∫–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return

        if call.data.startswith("track_"):
            track_index = int(call.data.split('_')[1])
            track = tracks[track_index]

            # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç—Ä–µ–∫ –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ –¥–∂–µ—Ä–µ–ª–∞ (YouTube —á–∏ Spotify)
            if user_delivery_method.get(user_id) == "zip":
                handle_zip_download(call, [track])
            else:
                if track.get('is_youtube'):
                    download_youtube_track(track, call.message.chat.id, user_audio_format)
                else:
                    download_and_send_track(track, call.message.chat.id, user_audio_format)

        elif call.data == "download_all":
            if user_delivery_method.get(user_id) == "zip":
                handle_zip_download(call, tracks)
            else:
                handle_single_download(call, tracks)

    except Exception as e:
        logger.exception(f"Error in callback handler: {str(e)}")
        bot.send_message(call.message.chat.id, f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞: {str(e)}")


def handle_delivery_method(call):
    """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É —Å–ø–æ—Å–æ–±—É –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è"""
    user_id = call.from_user.id
    tracks = user_tracks.get(user_id)

    if call.data == "delivery_single":
        user_delivery_method[user_id] = "single"
        markup = create_tracks_keyboard(tracks)
        bot.edit_message_text(
            "–û–±–µ—Ä–∏ —Ç—Ä–µ–∫–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )

    elif call.data == "delivery_zip":
        user_delivery_method[user_id] = "zip"
        markup = create_tracks_keyboard(tracks)
        bot.edit_message_text(
            "–û–±–µ—Ä–∏ —Ç—Ä–µ–∫–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤ ZIP –∞—Ä—Ö—ñ–≤:",
            call.message.chat.id,
            call.message.message_id,
            reply_markup=markup
        )


def handle_single_download(call, tracks):
    """–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–æ –æ–¥–Ω–æ–º—É —Ñ–∞–π–ª—É"""
    if call.data == "download_all":
        bot.edit_message_text(
            "–ü–æ—á–∏–Ω–∞—é –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–µ–∫—ñ–≤...",
            call.message.chat.id,
            call.message.message_id
        )

        total_tracks = len(tracks)
        for i, track in enumerate(tracks, 1):
            try:
                bot.send_message(
                    call.message.chat.id,
                    f"–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—É {i}/{total_tracks}: {track['artist']} - {track['name']}"
                )
                download_and_send_track(track, call.message.chat.id, user_audio_format)
            except Exception as e:
                bot.send_message(
                    call.message.chat.id,
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ {track['artist']} - {track['name']}: {str(e)}"
                )

        bot.send_message(
            call.message.chat.id,
            f"‚úÖ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ç—Ä–µ–∫—ñ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
        )

    else:
        track_index = int(call.data.split('_')[1])
        track = tracks[track_index]
        download_and_send_track(track, call.message.chat.id, user_audio_format)


def send_large_file(bot, chat_id, file_path, caption=None, max_retries=3):
    """
    –ù–∞–¥—Å–∏–ª–∞—î –≤–µ–ª–∏–∫–∏–π —Ñ–∞–π–ª —á–µ—Ä–µ–∑ Telegram API –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –ø–æ–≤—Ç–æ—Ä–Ω–∏—Ö —Å–ø—Ä–æ–±
    —Ç–∞ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫.
    """
    for attempt in range(max_retries):
        try:
            with open(file_path, 'rb') as file:
                return bot.send_document(
                    chat_id=chat_id,
                    document=file,
                    caption=caption,
                    allow_sending_without_reply=True,
                    timeout=300  # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —î–¥–∏–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä timeout
                )
        except Exception as e:
            if attempt == max_retries - 1:  # –Ø–∫—â–æ —Ü–µ –±—É–ª–∞ –æ—Å—Ç–∞–Ω–Ω—è —Å–ø—Ä–æ–±–∞
                raise e
            logger.warning(f"Attempt {attempt + 1} failed: {str(e)}. Retrying...")
            time.sleep(5)  # –ß–µ–∫–∞—î–º–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ—é —Å–ø—Ä–æ–±–æ—é


def handle_zip_download(call, tracks):
    """–û–Ω–æ–≤–ª–µ–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ZIP –∞—Ä—Ö—ñ–≤—É –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é YouTube"""
    global user_id, track_name
    try:
        user_id = call.from_user.id
        temp_folder = create_temp_folder(user_id)
        user_temp_folders[user_id] = temp_folder

        status_message = bot.edit_message_text(
            "–ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ZIP –∞—Ä—Ö—ñ–≤—É...",
            call.message.chat.id,
            call.message.message_id
        )

        total_tracks = len(tracks)
        downloaded_files = []

        for i, track in enumerate(tracks, 1):
            try:
                if track.get('is_youtube'):
                    # –î–ª—è YouTube —Ç—Ä–µ–∫—ñ–≤—î


                    track_name = f"{track['author']} - {track['title']}"
                else:
                    # –î–ª—è Spotify —Ç—Ä–µ–∫—ñ–≤
                    track_name = f"{track['artist']} - {track['name']}"

                bot.edit_message_text(
                    f"‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç—Ä–µ–∫—É {i}/{total_tracks}:\n"
                    f"{track_name}\n"
                    f"–ó–∞–≥–∞–ª—å–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å: [{i}/{total_tracks}]",
                    call.message.chat.id,
                    status_message.message_id
                )

                progress = DownloadProgress(bot, call.message.chat.id, track_name)
                progress.send_initial_message()

                if track.get('is_youtube'):
                    output_path = download_youtube_track_for_zip(
                        temp_folder,
                        track,
                        progress,
                        user_audio_format
                    )
                else:
                    output_path = download_track_for_zip(
                        temp_folder,
                        track,
                        progress,
                        user_audio_format
                    )

                if output_path and os.path.exists(output_path):
                    downloaded_files.append(output_path)

            except Exception as e:
                bot.send_message(
                    call.message.chat.id,
                    f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ {track_name}: {str(e)}"
                )

        # –†–µ—à—Ç–∞ –∫–æ–¥—É –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è ZIP –∞—Ä—Ö—ñ–≤—É –∑–∞–ª–∏—à–∞—î—Ç—å—Å—è –±–µ–∑ –∑–º—ñ–Ω
        if downloaded_files:
            bot.edit_message_text(
                "üì¶ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è ZIP –∞—Ä—Ö—ñ–≤—É...",
                call.message.chat.id,
                status_message.message_id
            )

            chunks = split_file(downloaded_files, temp_folder, 49 * 1024 * 1024)

            for i, chunk_path in enumerate(chunks, 1):
                try:
                    bot.edit_message_text(
                        f"üì§ –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è —á–∞—Å—Ç–∏–Ω–∏ {i}/{len(chunks)}...",
                        call.message.chat.id,
                        status_message.message_id
                    )

                    with open(chunk_path, 'rb') as file:
                        bot.send_document(
                            chat_id=call.message.chat.id,
                            document=file,
                            caption=f"–ß–∞—Å—Ç–∏–Ω–∞ {i} –∑ {len(chunks)}"
                        )

                    os.remove(chunk_path)

                except Exception as e:
                    bot.send_message(
                        call.message.chat.id,
                        f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —á–∞—Å—Ç–∏–Ω–∏ {i}: {str(e)}"
                    )

        # –û—á–∏—â–µ–Ω–Ω—è
        cleanup_temp_folder(temp_folder)
        del user_temp_folders[user_id]

    except Exception as e:
        logger.exception(f"Error in ZIP download: {str(e)}")
        bot.send_message(
            call.message.chat.id,
            f"–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ ZIP –∞—Ä—Ö—ñ–≤—É: {str(e)}"
        )
        if user_id in user_temp_folders:
            cleanup_temp_folder(user_temp_folders[user_id])
            del user_temp_folders[user_id]

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    # –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–ø–∫—É –¥–ª—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
    os.makedirs("temp", exist_ok=True)
    logging.info("Bot started")
    bot.infinity_polling()

if __name__ == "__main__":
    main()
